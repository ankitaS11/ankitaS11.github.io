<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Ankita Sharma</title>
    <link>https://ankitaS11.github.io/tags/python/</link>
    <description>Recent content in python on Ankita Sharma</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 25 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ankitaS11.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Iterators and Generators in Python</title>
      <link>https://ankitaS11.github.io/posts/2021/09/understanding-iterators-and-generators-in-python/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/understanding-iterators-and-generators-in-python/</guid>
      <description>Iteration refers to the process of repeating the same logic more than one time.
An iterator is an object containing a countable number of values and is used to iterate over iterable objects (list, tuples, dictionaries, sets, etc.). It implements the iterator protocol, which consists of the methods __ iter__() and __ next__().
iter() keyword is used to create an iterator containing an iterable object. next() keyword is used to call the next element in the iterable object.</description>
    </item>
    
    <item>
      <title>Understanding __ str __( ) and  __ repr __( ) in Python</title>
      <link>https://ankitaS11.github.io/posts/2021/09/understanding-__-str-__-and-__-repr-__-in-python/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/understanding-__-str-__-and-__-repr-__-in-python/</guid>
      <description>In class and objects, dunder str ( __ str __( ) ) and dunder repr ( __ repr __( ) ) built-in functions, also known as magic functions are used to return the string representation of the object. If both of them return strings, then what’s the difference between them?
Firstly, let’s see what these functions returns when they are not defined in the class.
# Creating a class named Addition class Addition: def __init__(self,num1,num2): self.</description>
    </item>
    
    <item>
      <title>Understanding Decorators in Python</title>
      <link>https://ankitaS11.github.io/posts/2021/06/understanding-decorators-in-python/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/06/understanding-decorators-in-python/</guid>
      <description>Decorators are functions which modifies the functionality of other functions (Instead of adding more codes to original function, decorators can be used). Decorators wrap around the main function and allow us to operate on inputs and outputs. Firstly let us understand functions in python -
def operations(x): &amp;#34;&amp;#34;&amp;#34;Incrementing x by 1&amp;#34;&amp;#34;&amp;#34; x += 1 return x operations(x=1) Now let&amp;rsquo;s say we want to increment our input x by 1 before and after the operations function executes and, to illustrate this example, let&amp;rsquo;s say the increments have to be separate steps.</description>
    </item>
    
  </channel>
</rss>

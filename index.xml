<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ankita Sharma</title>
    <link>https://ankitaS11.github.io/</link>
    <description>Recent content on Ankita Sharma</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 28 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ankitaS11.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> Python - itertools.product()</title>
      <link>https://ankitaS11.github.io/posts/2021/09/python-itertools.product/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/python-itertools.product/</guid>
      <description>The itertools is a module in Python having a collection of functions for handling iterators. They make iterating through the iterables like lists and strings very easily.
itertools.product() is a function in itertools module to generate cartesian product of multiple lists in python, it is equivalent to for loops. They basically creates iterators for efficient looping and falls under the category of combinatoric iterators .
What does itertools.product() do ?</description>
    </item>
    
    <item>
      <title>Python - itertools.chain()</title>
      <link>https://ankitaS11.github.io/posts/2021/09/python-itertools.chain/</link>
      <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/python-itertools.chain/</guid>
      <description>The itertools is a module in Python having a collection of functions for handling iterators. They make iterating through the iterables like lists and strings very easily.
itertools.chain() is a function in itertools module that takes a series of iterables and returns one iterable. It basically groups all the iterable together and produces a single iterable as output. They come under the category of terminating iterators.
Syntax
itertools.chain(*iterables) Example 1</description>
    </item>
    
    <item>
      <title>Python Decorators</title>
      <link>https://ankitaS11.github.io/posts/2021/09/python-decorators/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/python-decorators/</guid>
      <description>Decorators are functions which modifies the functionality of other functions (instead of adding more codes to original function, decorators can be used). Decorators wrap around the main function and allow us to operate on inputs and outputs. Firstly let us understand functions in python -
def operations(x): &amp;#34;&amp;#34;&amp;#34;Incrementing x by 1&amp;#34;&amp;#34;&amp;#34; x += 1 return x operations(x=1) Now let&amp;rsquo;s say we want to increment our input x by 1 before and after the operations function executes and, to illustrate this example, here&amp;rsquo;s how we would do it by changing the original code:</description>
    </item>
    
    <item>
      <title>Iterators and Generators in Python</title>
      <link>https://ankitaS11.github.io/posts/2021/09/iterators-and-generators-in-python/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/iterators-and-generators-in-python/</guid>
      <description>Iteration refers to the process of repeating the same logic more than one time.
An iterator is an object containing a countable number of values and is used to iterate over iterable objects (list, tuples, dictionaries, sets, etc.). It implements the iterator protocol, which consists of the methods __ iter__() and __ next__().
iter() keyword is used to create an iterator containing an iterable object. next() keyword is used to call the next element in the iterable object.</description>
    </item>
    
    <item>
      <title>Understanding __ str __( ) and  __ repr __( ) in Python</title>
      <link>https://ankitaS11.github.io/posts/2021/09/understanding-__-str-__-and-__-repr-__-in-python/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/understanding-__-str-__-and-__-repr-__-in-python/</guid>
      <description>In class and objects, dunder str ( __ str __( ) ) and dunder repr ( __ repr __( ) ) built-in functions, also known as magic functions are used to return the string representation of the object. If both of them return strings, then what’s the difference between them?
Firstly, let’s see what these functions returns when they are not defined in the class.
# Creating a class named Addition class Addition: def __init__(self,num1,num2): self.</description>
    </item>
    
    <item>
      <title>Vectors in C&#43;&#43;</title>
      <link>https://ankitaS11.github.io/posts/2021/09/vectors-in-c-/</link>
      <pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/vectors-in-c-/</guid>
      <description>Vectors are sequence container class that stores its elements in contiguous memory locations and implements dynamic array, which means it allocates memory at run time and resizes itself automatically when an element is inserted or deleted. Vectors can simply be thought of as an array that has the ability to automatically resize itself.
We need to import the header &amp;lt;vector&amp;gt; to make use of vectors.#include &amp;lt;vector&amp;gt;
VECTOR DECLARATION AND INITIALISATION</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ankitaS11.github.io/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/about/</guid>
      <description>Hello! I am a third-year Electronics and Communication Engineering undergraduate at International Institute of Information Technology, Naya Raipur, Chhattisgarh, India.
Work Experience   Summer Research Intern - Indian Institute of Technology, Bhilai (May 2021 - Aug 2021).
 Mentor: Dr. Gagan Raj Gupta, Visiting Associate Professor, IIT Bhilai Scraped websites and collected landslide descriptions from the year 2006-2020, prepared dataset, extracted information from descriptions using NER(Named Entity Recognition), and performed data preprocessing.</description>
    </item>
    
    <item>
      <title>Categories</title>
      <link>https://ankitaS11.github.io/categories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/categories/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ankita Sharma</title>
    <link>https://ankitaS11.github.io/</link>
    <description>Recent content on Ankita Sharma</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 01 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ankitaS11.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Outreachy: My Progress so far</title>
      <link>https://ankitaS11.github.io/posts/2022/07/outreachy-my-progress-so-far/</link>
      <pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2022/07/outreachy-my-progress-so-far/</guid>
      <description>Hi everyone! Thought I’ll update about what I’ve been upto, and how the progress looks like. This week was a little slow in terms of writing codes, but that’s the fun part - half of the time is spent (also: should be) on discussions, getting consensus on your thoughts and discussing options available. I think I have had a fairly great experience doing that, my mentor Andrew helped me push forward to discuss my thoughts openly on GitHub discussions, and I think it was a great learning experience for me.</description>
    </item>
    
    <item>
      <title>Outreachy: Everyone Struggles!</title>
      <link>https://ankitaS11.github.io/posts/2022/06/outreachy-everyone-struggles/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2022/06/outreachy-everyone-struggles/</guid>
      <description>This is my third blog, in the Outreachy series, where I talk about my experience working with the Moja Global community, and what I learnt - dos and don&amp;rsquo;ts, probably?
It’s too early, to be honest, to comment on what one should not do, but I’m sure I’ve learnt what can be done to be better in the tasks you’ve been assigned to. A few points:
Discuss your questions publicly! Open discussions, issues.</description>
    </item>
    
    <item>
      <title>Outreachy: Discussion on MongoDB vs CosmosDB</title>
      <link>https://ankitaS11.github.io/posts/2022/06/outreachy-discussion-on-mongodb-vs-cosmosdb/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2022/06/outreachy-discussion-on-mongodb-vs-cosmosdb/</guid>
      <description>As an outreachy intern at Moja Global, I was involved in discussions about storing data in CosmosDB and MongoDB.
This blog contains my notes on the comparison of MongoDB and CosmosDB. A lot of this is written in terms of how a database server can be useful for my work at Moja Global.
Factors affecting the choice Better choice as document storage. Type of data that needs to be stored. Performance, storage capacity and throughput scale.</description>
    </item>
    
    <item>
      <title>Outreachy: Starting as an intern</title>
      <link>https://ankitaS11.github.io/posts/2022/06/outreachy-starting-as-an-intern/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2022/06/outreachy-starting-as-an-intern/</guid>
      <description>This is my first blog in the series where I talk about my experience as an intern at Outreachy, and working with the Moja Global community! I&amp;rsquo;m more than excited to share how things go as i move along, and I hope to continue writing these blogs weekly.
In this blog, I will be talking about myself and the core values that helped me throughout the journey.
Who Am I?</description>
    </item>
    
    <item>
      <title>Product of an array except self</title>
      <link>https://ankitaS11.github.io/posts/2021/10/product-of-an-array-except-self/</link>
      <pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/10/product-of-an-array-except-self/</guid>
      <description>I came across an interesting question, so thought of sharing this!
Question : Given an array nums of n integers where n &amp;gt; 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].
Example 1:
Input: [1,2,3,4]Output: [24,12,8,6] Example 2:
Input: nums = [-1,1,0,-3,3]Output: [0,0,9,0,0] Constraints:
1. 2 &amp;lt;= nums.length &amp;lt;= 1052. -30 &amp;lt;= nums[i] &amp;lt;= 303.</description>
    </item>
    
    <item>
      <title> Python - itertools.product()</title>
      <link>https://ankitaS11.github.io/posts/2021/09/python-itertools.product/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/python-itertools.product/</guid>
      <description>The itertools is a module in Python having a collection of functions for handling iterators. They make iterating through the iterables like lists and strings very easily.
itertools.product() is a function in itertools module to generate cartesian product of multiple lists in python, it is equivalent to for loops. They basically creates iterators for efficient looping and falls under the category of combinatoric iterators .
What does itertools.product() do ?</description>
    </item>
    
    <item>
      <title>Python - itertools.chain()</title>
      <link>https://ankitaS11.github.io/posts/2021/09/python-itertools.chain/</link>
      <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/python-itertools.chain/</guid>
      <description>The itertools is a module in Python having a collection of functions for handling iterators. They make iterating through the iterables like lists and strings very easily.
itertools.chain() is a function in itertools module that takes a series of iterables and returns one iterable. It basically groups all the iterable together and produces a single iterable as output. They come under the category of terminating iterators.
Syntax
itertools.chain(*iterables) Example 1</description>
    </item>
    
    <item>
      <title>Basics of GANs and Loss Function</title>
      <link>https://ankitaS11.github.io/posts/2021/09/basics-of-gans-and-loss-function/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/basics-of-gans-and-loss-function/</guid>
      <description>GANs are deep neural architecture trained in an adversarial manner (in english dictionary, adversarial means conflict or opposition) to generate data that mimics the distribution we want to approximate. It comprises of two networks - Generator and Discriminator, competing one against the other (that is why Adversarial).
Discriminator
It discriminates between two different classes of data, that is why known as binary classifier. For exampe when you want to classify real and fake images of person, then discriminative network comes into use.</description>
    </item>
    
    <item>
      <title>Python Decorators</title>
      <link>https://ankitaS11.github.io/posts/2021/09/python-decorators/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/python-decorators/</guid>
      <description>Decorators are functions which modifies the functionality of other functions (instead of adding more codes to original function, decorators can be used). Decorators wrap around the main function and allow us to operate on inputs and outputs. Firstly let us understand functions in python -
def operations(x): &amp;#34;&amp;#34;&amp;#34;Incrementing x by 1&amp;#34;&amp;#34;&amp;#34; x += 1 return x operations(x=1) Now let&amp;rsquo;s say we want to increment our input x by 1 before and after the operations function executes and, to illustrate this example, here&amp;rsquo;s how we would do it by changing the original code:</description>
    </item>
    
    <item>
      <title>Iterators and Generators in Python</title>
      <link>https://ankitaS11.github.io/posts/2021/09/iterators-and-generators-in-python/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ankitaS11.github.io/posts/2021/09/iterators-and-generators-in-python/</guid>
      <description>Iteration refers to the process of repeating the same logic more than one time.
An iterator is an object containing a countable number of values and is used to iterate over iterable objects (list, tuples, dictionaries, sets, etc.). It implements the iterator protocol, which consists of the methods __ iter__() and __ next__().
iter() keyword is used to create an iterator containing an iterable object. next() keyword is used to call the next element in the iterable object.</description>
    </item>
    
  </channel>
</rss>
